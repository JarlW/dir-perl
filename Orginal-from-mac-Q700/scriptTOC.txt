  <TITLE>perlBeta manual</TITLE>  # ALLTING ÄR PERL liknande PSEUDO-KOD#vad vill vi ha?Ett script eller flera som går igenom _alla_ directoryn i ett filsystemfrån en given directory neråt och skriver en fil i varje sub dirika som innehåller information om denna directory. Denna fil skall ha bestå av fyra block:	1.  Start	2.  Top	3.  body	4.  endscriptet får gärna vara så modulär som möjligt för att man senare skall kunnaskapa andra liknande  "innehållsförtecknings"-filer.En annat framtida behov är att hitta filer med givet namn eller innehåll från samma filstruktur ( t.ex gör en lista på alla filer inklusive path som har namnet "personal.html").Ett annat sätt att se på saken:	A. Läsa rekursivt en filstruktur		a. directoryn		b. filnamn och innehåll	B. läsa html tagar i filerAndra krav och önskmål:	modulariskt	lätt att applicera på andra OS som kan köra PERLFilernas sex-liv:(D.v.s reserverade filnamn och regler)syntax:		H-LA.EXT		Där 	H =	filens namn och "nonprinting" finns listade i @FileDeny, 			längden kan variera!		- =	Separator (endast om språkversion)		LA=	Språket, om saknas, std språk svenska, två tecken		. =	standard OS reparator		EXT=Normalfilextension, de som skall "printas" finns i @FileAllow			tre eller fyra tecken.exempel:		index.html		personal.htm		index-uk.html		personal-fi.htmOBS: Separatorn (-) kan finnas även annanstans (i H) än framför språket     Altså k2114-kostnad.html är tillåtet och tillhör "svenska" Webben.     Läs språket som den strängen, som finns mellan strecket och punkten     SÄTT inte 'hardcoded' text p.g.a möjliga språk!"Globala"VARIABLER$rootDir		# Alias för www-home$tocFileName	#Namet för filen som skall skrivas. 				#Behövs ifall det skall skapas alternativa Menyer!				# och/eller språkversioner!$currLang		# språket (se filnamn) DEFAULT SE@FileAllow		# Godkända filnamn (typ *.htm , *.html, *.pdf)				# vi utgår från "DENY", för att undvika garbage@FileDeny		# Reserverade filnamn ('toc*.html',@pathArray		# Array som innehåller info om path			$currDirName	#Varje dirName i en given path$currDirLabel	# finnas i en "conifg" fil@fileArray		# Lista med filer	$FileName	$FileTitle	$FileDate	#Last modified dateinit # sätt i "parameter fil om möjligt$rootDir = '/export/home/www';$currLang = 'SE'; $tocFileName ='toc.hml';			@FileAllow= (htm,html,txt,pdf);@pathArray = split($path)             #splita pathen	#path betyder från $rootDir till $currentDirchdir($currentDir);open (toc.html);main printToc {	Sub Start	Sub Top	Sub Body	Sub End}close (toc.html);#1. Start#helst från en fil eller skall vara lätt att editera:Sub start{	read ('dir.cfg'):      #läs och returnera $currDirLabel	print '<HTML><HEAD><TITLE>$currDirLabel</TITLE></HEAD><BODY>';}#2.Top#innehåller länkar uppåt i "hierarkin". fungerar som en loop,eller kan man splitta pathen #från "rootDir"?Sub Top {	print '';			#HTML kan sättas här# NEJ, vill ha URLen i formen ../   # Det är inte säkert att alla httpd:n förstår att / i början betyder root !	$TEMPref ='/'				for ($i = 0; $i < @#pathArray; $i++) {    		read ('dir.cfg');		#läs och returnera $currDirLabel			print '<BR><A HREF="$TEMPref$tocFileName" TARGET="text">$dirTitle</A>';			++$TEMPref ='@pathArray[i]/';			chdir @pathArray[i];		}	print '';}#3. Body# innehåller filerna i $currDir om dessa slutar på #@fileAllow och innehåller $currLang och inte innehåller @fileDenySub Body () {	print '';				# ifall man vill ha in extra html	@fileArray = readdir($currDir);					for ($i = 0; $i < @#fileArray; $i++){	# hoppa över skräpet från @fileArray	# alias @fileAllow,@fileDeny, $currLang		if (@fileArray[i] = @fileAllow =false OR  $Lang = true){}				else{			$fileTitle = grep (<TITLE>*</TITE>); # kan vara skrivet som små!				# Hmm så enkelt är det säkert inte			print '<BR><A HREF="@fileArray[i]" TARGET="text">'$FileTitle'</A>';		}	}	print '';				# ifall man vill ha in extra html}#End body#4. END routinSub End {	print '</BODY></HTML>';}